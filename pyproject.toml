[tool.ruff]
select = [
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "COM", # flake8-commas
    "D", # pydocstyle
    "E", # pycodestyle Error
    "EXE", # flake8-executable
    "F", # Pyflakes
    "I", # isort: unsorted-imports, missing-required-import
    "ISC", # flake8-implicit-str-concat
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "T10", # flake8-debugger
    "TCH", # flake8-type-checking, not done for plugins
    "TID", # flake8-tidy-imports
    "TID", # flake8-tidy-imports
    "UP", # pyupgrade
    "W", # pycodestyle Warning
    "YTT", # flake8-2020

    # "C90", # mccabe: C901: {name} is too complex ({complexity})
    # "ANN", # flake8-annotationsq
    # "N", # pep8-naming
    # "ARG", # flake8-unused-arguments: ARG001 Unused function argument
    # "A", # flake8-builtins
    # "S", # flake8-bandit
]
ignore = [
	"PGH003", # Use specific rule codes when ignoring type issues
    "B018", # Found useless expression. Either assign it to a variable or remove it.
    "B019", # Use of `functools.lru_cache` or `functools.cache` on methods can lead to memory leaks
    "B028", # No explicit `stacklevel` keyword argument found. Huh???
    "C408", # Unnecessary `dict` call (rewrite as a literal)
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in `__init__`
    "D205", # 1 blank line required between summary line and description
    "D206", # Docstring should be indented with spaces, not tabs
    "D211", # (Do not enable) no-blank-line-before-class
    "D212", # multi-line-summary-first-line, conflicts with D213:multi-line-summary-second-line
    "D401", # First line of docstring should be in imperative mood
    "D417", # Missing argument descriptions in the docstring
    "E402", # Module level import not at top of file
    "SIM105", # Use contextlib.suppress({exception}) instead of try-except-pass
    "SIM108", # Use ternary operator {contents} instead of if-else-block
    "SIM117", # Use a single with statement with multiple contexts...
    "UP009", # UTF-8 encoding declaration is unnecessary
    "UP010", # Unnecessary `__future__`"
    "UP035", # Import from `collections.abc` instead: `Generator`
    "UP037", # Remove quotes from type annotation
    "W191",
    # ERA, PD,
]

# UP033: (Since Python 3.9) Use `@functools.cache`
# instead of `@functools.lru_cache(maxsize=None)`

# since which Python is comma after **kwargs allowd?

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = [
    "F401",
    # "E", "F", "W",
    "RET",
    "I",
    "COM",
    "TCH",
    "ANN",
    "W291",
    "W293",
    "D",
    "UP004",
    "UP006",
    "UP008",
    "UP015",
    "UP024",
    "UP028",
    "UP030",
    "UP031",
    "UP032",
    "UP033",
    "UP034",
    "UP039",
]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    "setup.py",
    # "pyglossary/ui/gtk4_utils/*",
    # "pyglossary/ui/gtk3_utils/*",
    "pyglossary/plugins/babylon_bgl/bgl_gzip.py",
    "pyglossary/plugins/testformat.py",
    "pyglossary/plugin_lib/*",
    "pyglossary/ui/gtk*_utils/__init__.py",
    "pyglossary/ui/ui_qt.py",
    "pyglossary/ui/progressbar/widgets.py",
    "pyglossary/reverse.py",
    "wcwidth*",
    ".direnv",
    ".eggs",
    ".git",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "venv",
]
per-file-ignores = {}

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

target-version = "py39"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.mypy]
exclude = [
	# '.*/plugin_lib/.*',
]

[tool.refurb]
ignore = [
    101, # Replace `with open(x, ...) as f: y = f.read()` with `y = Path(x).read_bytes()`
    103, # Replace `with open(x, ...) as f: f.write(y)` with `Path(x).write_bytes(y)`
    104, # Replace `os.getcwd()` with `Path.cwd()`
    107, # Replace `try: ... except OSError: pass` with `with suppress(OSError): ...`
    112, # Replace `dict()` with `{}`
    141, # Replace `os.path.exists(x)` with `Path(x).exists()`
    144, # Replace `os.remove(x)` with `Path(x).unlink()`
    146, # Replace `os.path.isfile(x)` with `Path(x).is_file()`
    150, # Replace `os.makedirs(x)` with `Path(x).mkdir(parents=True)`
    155, # Replace `os.path.getsize(x)` with `Path(x).stat().st_size`
]
# refurb has no exclude param!
#exclude = [
#    "pyglossary/plugin_lib/readmdict.py",
#]
#load = ["some_module"]
#quiet = true