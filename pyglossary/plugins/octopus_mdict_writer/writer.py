# -*- coding: utf-8 -*-
from __future__ import annotations

import os
import sys
from typing import TYPE_CHECKING

from pyglossary.core import log

if TYPE_CHECKING:
	from collections.abc import Generator

	from pyglossary.glossary_types import EntryType, WriterGlossaryType


__all__ = ["Writer"]


class Writer:
	_encoding: str = "utf-8"
	_key_block_size: int = 32  # KB
	_record_block_size: int = 64  # KB
	_compression_type: int = 2  # zlib

	def __init__(self, glos: WriterGlossaryType) -> None:
		self._glos = glos
		self._filename = ""
		self._entries: dict[str, str] = {}

	def finish(self) -> None:
		self._filename = ""
		self._entries = {}

	def open(self, filename: str) -> None:
		self._filename = filename

	def write(self) -> Generator[None, EntryType, None]:
		"""
		Generator that receives entries and builds MDX dictionary.
		Collects all entries, then writes proper MDX file using mdict-utils.
		"""
		while True:
			entry = yield
			if entry is None:
				break
			if entry.isData():
				# Skip data entries for MDX (they go in MDD files)
				continue

			# Get the primary term
			terms = entry.l_term
			if not terms:
				continue

			primary_term = terms[0]
			definition = entry.defi

			# Store the entry in the dictionary
			# MDictWriter expects dict[str, str] for MDX files
			self._entries[primary_term] = definition

		# Now write all entries to proper MDX file
		self._writeMdxFile()

	def _writeMdxFile(self) -> None:
		"""Write collected entries to proper MDX file using mdict-utils MDictWriter."""
		if not self._entries:
			log.warning("No entries to write")
			return

		# Add mdict-utils to path
		mdict_utils_path = os.path.join(os.path.dirname(__file__), '..', '..', '..', '..', 'mdict-utils')
		if mdict_utils_path not in sys.path:
			sys.path.insert(0, mdict_utils_path)

		try:
			from mdict_utils.base.writemdict import MDictWriter

			# Get title and description from glossary
			title = self._glos.getInfo("name") or "PyGlossary MDX Export"
			description = self._glos.getInfo("description") or "Generated by PyGlossary"

			# Create MDictWriter with the entries dictionary
			writer = MDictWriter(
				self._entries,
				title=title,
				description=description,
				block_size=self._record_block_size * 1024,
				encoding=self._encoding,
				compression_type=self._compression_type,
				version="2.0",
				is_mdd=False
			)

			# Write the MDX file
			with open(self._filename, "wb") as outfile:
				writer.write(outfile)

			log.info(f"Successfully wrote {len(self._entries)} entries to {self._filename}")

		except ImportError as e:
			log.error(f"Failed to import mdict_utils: {e}")
			log.error("Make sure mdict-utils is available in the parent directory")
			# Fallback: create a simple text file
			with open(self._filename, 'w', encoding=self._encoding) as f:
				for term, definition in self._entries.items():
					f.write(f"{term}\n")
					for line in definition.split('\n'):
						f.write(f"{line}\n")
					f.write("</>\n")
			log.info(f"Fallback: wrote text content to {self._filename}")
