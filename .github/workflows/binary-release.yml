name: 'binary release mac+windows'
# pyicu: https://github.com/googlefonts/pyfontaine/issues/109

on:
  workflow_dispatch:
  push:
    branches:
      - 'tbd'
    # pull_request:
    #   branches:
    #     - '**'
    #     - '!master'
    #     - '!pyup/**'
    paths-ignore:
      - '.vscode/**'
      - 'doc/**'
      - '*.md'
      # - '.github/**'

env:
  UV_SYSTEM_PYTHON: 0
  PYTHONWARNINGS: ignore::EncodingWarning
  PYTHONWARNDEFAULTENCODING: 0
  APPNAME: PyGlossaryTk
  DIST_DIR: dist.nuitka.tk
  HOMEBREW_NO_INSTALL_CLEANUP: true
  HOMEBREW_NO_ENV_HINTS: true
  HOMEBREW_CLEANUP_MAX_AGE_DAYS: 999
  HOMEBREW_NO_ANALYTICS: true
  HOMEBREW_NO_AUTO_UPDATE: true
  MAIN_SCRIPT: main.py
  RESOURCE_DIR: "resources"

jobs:
  build_macos:
    runs-on: ${{ matrix.os }}

    strategy:
      # max-parallel: 1
      # see https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/running-variations-of-jobs-in-a-workflow
      matrix:
        # python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']
        python-version: ['3.13']
        os: ['macos-13', 'macos-14']
      fail-fast: true
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          # Number of commits to fetch, ootb only 1 commit
          # 0 = all history for all branches and tags. (needed for git describe)
          fetch-depth: 0
          fetch-tags: true
          # ref: nuitka-release

      - name: Update brew
        run: |
          brew update

      - name: Install brew dependencies
        run: |
          brew install \
             libffi \
             gettext \
             cmake \
             ccache \
             pkg-config \
             icu4c \
             lzo

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set cache dir
        run: echo "pip_cache_dir=$(pip cache dir)" >> $GITHUB_ENV
        shell: bash

      - name: Fetch cache
        id: cache-target
        uses: actions/cache@v4
        with:
          path: ${{ env.pip_cache_dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}

      - name: Install uv
        # https://docs.astral.sh/uv/guides/integration/github/#caching
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: Create venv with uv
        run: |
          uv venv .venv --python ${{ matrix.python-version }}
          echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH

      - name: Activate venv
        run: |
          source .venv/bin/activate

      - name: set vars
        id: envconf
        run: |
          echo "BREW_PREFIX=$(brew --prefix)" >> $GITHUB_ENV
          echo "VERSION=$(git describe --abbrev=0)" >> $GITHUB_ENV
          echo "VERSION_WITH_HASH=$(git describe)" >> $GITHUB_ENV
          echo "PREFIX_ICU4C=$(brew --prefix icu4c)" >> $GITHUB_ENV
          echo "PREFIX_LZO=$(brew --prefix lzo)" >> $GITHUB_ENV
          echo "PREFIX_LIBFFI=$(brew --prefix libffi)" >> $GITHUB_ENV

      - name: Set pip build vars
        id: envpip
        run: |
          # Use the environment variables set in the previous step
          echo "C_INCLUDE_PATH=${PREFIX_LZO}/include:${PREFIX_LZO}/include/lzo" >> $GITHUB_ENV
          echo "LIBRARY_PATH=${BREW_PREFIX}/lib" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=${BREW_PREFIX}/lib/pkgconfig:${PREFIX_ICU4C}/lib/pkgconfig:${PREFIX_LZO}/lib/pkgconfig:${PREFIX_LIBFFI}/lib/pkgconfig" >> $GITHUB_ENV
          echo "LDFLAGS=-L${PREFIX_LIBFFI}/lib -L${PREFIX_ICU4C}/lib -L${PREFIX_LZO}/lib -L${BREW_PREFIX}/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I${PREFIX_ICU4C}/include -I${PREFIX_LIBFFI}/include -I${PREFIX_LZO}/include" >> $GITHUB_ENV
          echo "DYLD_LIBRARY_PATH=${PREFIX_ICU4C}/lib:${PREFIX_LIBFFI}/lib:${PREFIX_LZO}/lib:${BREW_PREFIX}/lib" >> $GITHUB_ENV
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV

      - name: Print env vars
        run: |
          echo "BREW_PREFIX: $BREW_PREFIX"
          echo "PREFIX_ICU4C: $PREFIX_ICU4C"
          echo "PREFIX_LZO: $PREFIX_LZO"
          echo "PREFIX_LIBFFI: $PREFIX_LIBFFI"
          echo "LDFLAGS: $LDFLAGS"
          echo "CPPFLAGS: $CPPFLAGS"
          echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
          echo "DYLD_LIBRARY_PATH: $DYLD_LIBRARY_PATH"

      - name: Install pyglossary dependencies
        run: |
          source .venv/bin/activate
          
          # Export vars
          export PKG_CONFIG_PATH="${BREW_PREFIX}/lib/pkgconfig:${PREFIX_ICU4C}/lib/pkgconfig:${PREFIX_LZO}/lib/pkgconfig:${PREFIX_LIBFFI}/lib/pkgconfig"
          export LDFLAGS="-L${PREFIX_LIBFFI}/lib -L${PREFIX_ICU4C}/lib -L${PREFIX_LZO}/lib -L${BREW_PREFIX}/lib"
          export CPPFLAGS="-I${PREFIX_ICU4C}/include -I${PREFIX_LIBFFI}/include -I${PREFIX_LZO}/include"
          export DYLD_LIBRARY_PATH="${PREFIX_ICU4C}/lib:${PREFIX_LIBFFI}/lib:${PREFIX_LZO}/lib:${BREW_PREFIX}/lib"
          export CC=clang
          export CXX=clang++

          # NUITKA
          uv pip install nuitka
          
          uv pip install beautifulsoup4 biplist colorize_pinyin html5lib libzim marisa-trie mistune polib prompt-toolkit pygments pymorphy2 python-idzip python-romkan-ng pyyaml tqdm xxhash
          
          # DEPENDENCIES THAT NEED COMPILATION
          uv pip install lxml
          ########### Install PyICU with static deps ##############
          STATIC_DEPS=true uv pip install --no-binary PyICU PyICU
          ########### Install python-lzo with static deps ##############
          ### ALSO SEE: https://github.com/Nuitka/Nuitka/issues/2580#issuecomment-1895611093
          STATIC_DEPS=true uv pip install --no-binary python-lzo python-lzo

      - name: Patch sources for nuitka build
        run: |
          cp $MAIN_SCRIPT $APPNAME.py
          rm __init__.py
          sed -i '' 's/default="auto"/default="tk"/g' pyglossary/ui/argparse_main.py
          # Fix Nuitka TkinterPlugin for Python 3.13/Tk 9.0 compatibility (system Python)
          python -c "
          import sys
          import os
          plugin_path = os.path.join('.venv', 'lib', 'python${{ matrix.python-version }}', 'site-packages', 'nuitka', 'plugins', 'standard', 'TkinterPlugin.py')
          if os.path.exists(plugin_path):
              with open(plugin_path, 'r') as f:
                  content = f.read()
              if '(\"8.5\", \"8.6\")' in content:
                  content = content.replace('(\"8.5\", \"8.6\")', '(\"8.5\", \"8.6\", \"9.0\")')
                  with open(plugin_path, 'w') as f:
                      f.write(content)
                  print('TkinterPlugin.py updated for Tk 9.0 compatibility')
              else:
                  print('TkinterPlugin.py already compatible or pattern not found')
          else:
              print(f'TkinterPlugin.py not found at {plugin_path}, skipping patch')
          " || true

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PREFIX_ICU4C/lib:$PREFIX_LZO/lib:$PREFIX_LZO/lib:$PREFIX_LIBFFI/lib:$PYTHONPATH" >> $GITHUB_ENV

      - name: nuitka Build
        env:
          PYTHONWARNDEFAULTENCODING: 0
        run: |
          # Activate virtual environment
          source .venv/bin/activate
          
          # Set architecture-specific flags
          if [ "$(uname -m)" = "arm64" ]; then
          ARCH_FLAGS="--target-arch=arm64"
          else
          ARCH_FLAGS="--target-arch=x86_64"
          fi
          
          # Ensure library paths are set for nuitka - use properly formatted paths
          export DYLD_LIBRARY_PATH="${PREFIX_ICU4C}/lib:${PREFIX_LIBFFI}/lib:${PREFIX_LZO}/lib:${BREW_PREFIX}/lib"
          export LDFLAGS="-L${PREFIX_LIBFFI}/lib -L${PREFIX_ICU4C}/lib -L${PREFIX_LZO}/lib -L${BREW_PREFIX}/lib"
          export CPPFLAGS="-I${PREFIX_ICU4C}/include -I${PREFIX_LIBFFI}/include -I${PREFIX_LZO}/include"
          export PKG_CONFIG_PATH="${BREW_PREFIX}/lib/pkgconfig:${PREFIX_ICU4C}/lib/pkgconfig:${PREFIX_LZO}/lib/pkgconfig:${PREFIX_LIBFFI}/lib/pkgconfig"
          export CC=clang
          export CXX=clang++
          
          echo "Final environment check before nuitka:"
          echo "LDFLAGS: $LDFLAGS"
          echo "CPPFLAGS: $CPPFLAGS"
          echo "DYLD_LIBRARY_PATH: $DYLD_LIBRARY_PATH"
          
          python -m nuitka \
          	--standalone \
          	--assume-yes-for-downloads \
          	--follow-imports \
          	--macos-create-app-bundle \
          	--macos-app-icon=res/pyglossary.icns \
          	--macos-signed-app-name="$APPNAME" \
          	--macos-app-name="$APPNAME" \
          	--macos-app-mode=gui \
          	--enable-plugin=tk-inter \
          	--include-package=pyglossary \
          	--include-module=tkinter \
            --nofollow-import-to=pyglossary.ui.ui_gtk \
          	--nofollow-import-to=pyglossary.ui.ui_gtk4 \
          	--nofollow-import-to=pyglossary.ui.ui_qt \
          	--nofollow-import-to=gi \
          	--nofollow-import-to=gtk \
          	--nofollow-import-to=pyqt4 \
          	--nofollow-import-to=pyqt5 \
          	--nofollow-import-to=pyqt6 \
          	--nofollow-import-to=*.tests \
          	--noinclude-pytest-mode=nofollow \
          	--noinclude-setuptools-mode=nofollow \
          	--plugin-disable=pyqt5 \
          	--include-module=pymorphy2 \
          	--include-module=lxml \
          	--include-module=polib \
          	--include-module=yaml \
          	--include-module=bs4 \
          	--include-module=html5lib \
          	--include-module=colorize_pinyin \
          	--include-package-data=pyglossary \
          	--include-data-files=about=about \
            --include-module=_json \
            --include-module=_bisect \
          	--include-data-files=_license-dialog=_license-dialog \
          	--include-data-dir=res=. \
          	--include-data-files=_license-dialog=license-dialog \
            --nofollow-import-to=unittest \
          	--noinclude-custom-mode=unittest:nofollow \
          	--output-dir="$DIST_DIR" \
          	--output-filename=$APPNAME \
          	$APPNAME.py

      - name: Copy files
        shell: python
        run: |
          from pathlib import Path
          import shutil
          import sys
          import os
          
          dist_dir = os.getenv("DIST_DIR")
          app_name = os.getenv("APPNAME")
          
          if not dist_dir or not app_name:
              print('missing env vars')
              sys.exit(1)
          
          dist_path = Path(dist_dir)
          print(f'DIST_DIR={dist_path}, APPNAME={app_name}')
          
          target_path = dist_path / f"{app_name}.app/Contents/MacOS"
          sources = ["about", "AUTHORS", "_license-dialog", "config.json", "plugins-meta", "help", "res", "pyglossary"]
          
          if not target_path.exists():
              print(f'missing target dir {target_path.absolute()}')
              sys.exit(1)
          
          for source in sources:
              src = Path(source)
              try:
                  if src.is_dir():
                      copied_to = shutil.copytree(src, target_path / src.name, dirs_exist_ok=True, symlinks=True, ignore_dangling_symlinks=True)
                  else:
                      copied_to = shutil.copy(src, target_path, follow_symlinks=False)
                  print(f"Copied {src} -> {copied_to}")
              except FileNotFoundError:
                  print(f"Missing {src}")
              except PermissionError:
                  print(f"No access {src}")
              except Exception as e:
                  print(f"Failed {src}: {e}")
          print("Done")

      - name: Upload Artifacts zip
        uses: actions/upload-artifact@v4
        with:
          # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#github-context
          overwrite: true
          name: ${{ github.event.repository.name }}-${{ matrix.os }}-py${{ matrix.python-version }}-${{ env.VERSION_WITH_HASH }}
          path: |
            ${{ env.DIST_DIR }}/${{ env.APPNAME }}.app

      - name: Create DMG
        if: true
        run: |
           # create-dmg  --no-internet-enable --volname "${{ env.APPNAME }}-${{env.VERSION}}" --volicon res/pyglossary.icns --eula LICENSE  --app-drop-link 50 50 "${{env.APPNAME}}-${{ matrix.os }}-${{ env.VERSION_WITH_HASH }}.dmg" "${{ env.DIST_DIR }}/${{ env.APPNAME }}.app"
           hdiutil create -verbose -volname "${{ env.APPNAME }}-${{env.VERSION}}" -srcfolder "${{ env.DIST_DIR }}/${{ env.APPNAME }}.app" -ov -format UDZO -fs HFS+J "${{env.APPNAME}}-${{ matrix.os }}-${{ env.VERSION_WITH_HASH }}.dmg"

      - name: Upload Artifacts DMG
        if: true
        uses: actions/upload-artifact@v4
        with:
          overwrite: true
          # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#github-context
          name: ${{ github.event.repository.name }}-${{ matrix.os }}-py${{ matrix.python-version }}-${{ github.sha }}-${{ env.VERSION_WITH_HASH }}-DMG
          path: |
            **/*.dmg
            
  # ######################################### windows build ###############################
            
  build_windows_x64:
    strategy:
      matrix:
        python-version:
          # - "3.10"
          # - "3.11"
          - "3.13"
        # os: [macos-latest, ubuntu-latest, windows-latest]
        os: [windows-2022]
        
    runs-on: ${{ matrix.os }}
    
    env:
      PYTHONWARNDEFAULTENCODING: true
      APPNAME: PyGlossaryTk
      DIST_DIR: dist.nuitka.tk
      MAIN_SCRIPT: main.py
      RESOURCE_DIR: "resources" 
      
    steps:
      - name: Check-out repository
        uses: actions/checkout@v4
        with:
          submodules: true
          # Number of commits to fetch, ootb only 1 commit
          # 0 = all history for all branches and tags. (needed for git describe)
          fetch-depth: 0
          fetch-tags: true
          # ref: nuitka-release

      - name: "Set up Python 3.13"
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          # x86, x64, or arm64
          architecture: 'x64'

      - name: Set VERSION environment variable
        run: |
          echo "VERSION=$(git describe || git describe --abbrev=0 --tags)" >> $GITHUB_ENV
          echo "VERSION_WITH_HASH=$(git describe)" >> $GITHUB_ENV

      - name: "create and activate venv"
        run: |
          python3 -m venv .venv && .venv\Scripts\activate.bat

      - name: "install nuitka"
        run: |
          python3 -m pip install nuitka
      
      - name: "Install Dependencies"
        run: |
          python3 -m pip install beautifulsoup4 biplist colorize_pinyin html5lib libzim lxml marisa-trie mistune polib prompt-toolkit pygments pymorphy2 python-idzip python-romkan-ng pyyaml tqdm xxhash
          python3 -m pip install --extra-index-url https://glowinthedark.github.io/python-lzo/ python-lzo
          # python3 -m pip install https://github.com/glowinthedark/pyicu-build/releases/download/v2.15/pyicu-2.15-cp313-cp313-win_amd64.whl
          python3 -m pip install https://github.com/cgohlke/pyicu-build/releases/download/v2.15/PyICU-2.15-cp313-cp313-win_amd64.whl

      - name: Patch sources
        shell: python
        run: |
          import os
          from shutil import copy
          from pathlib import Path
          try:
              copy(os.getenv("MAIN_SCRIPT"), os.getenv("APPNAME"))
              Path('__init__.py').unlink()
              p = Path('pyglossary/ui/argparse_main.py'); p.write_text(p.read_text().replace('default="auto"', 'default="tk"'), encoding='utf8')
              p = Path('pyglossary/ui/runner.py'); p.write_text(p.read_text().replace('"gtk", "tk", "web"', '"tk", "gtk", "web"'), encoding='utf8')
              p = Path('pyglossary/ui/runner.py'); p.write_text(p.read_text().replace('"gtk", "tk", "web"', '"tk", "gtk", "web"'), encoding='utf8')
              p = Path('.venv/lib/python3.13/site-packages/nuitka/plugins/standard/TkinterPlugin.py'); p.write_text(p.read_text().replace('self.tk_inter_version in ("8.5", "8.6")', 'self.tk_inter_version in ("8.5", "8.6", "9.0")'), encoding='utf8')
          except Exception as e:
              print(str(e))

      - name: Nuitka build
        shell: cmd
        run: |
          python -m nuitka --standalone --assume-yes-for-downloads --plugin-enable=dll-files --plugin-enable=anti-bloat --follow-imports --windows-console-mode=disable --windows-icon-from-ico=res\pyglossary.ico --enable-plugin=tk-inter --include-package=pyglossary --include-module=tkinter --include-module=lzo --include-module=pymorphy2 --include-module=_json --include-module=lxml --include-module=polib --include-module=yaml --include-module=bs4 --include-module=html5lib --include-module=icu --include-module=colorize_pinyin --include-package-data=pyglossary --include-data-files=about=about --include-data-files=_license-dialog=_license-dialog --include-data-files=_license-dialog=license-dialog --noinclude-custom-mode=unittest:nofollow --noinclude-pytest-mode=nofollow --noinclude-setuptools-mode=nofollow --nofollow-import-to=pyglossary.ui.ui_gtk --nofollow-import-to=pyglossary.ui.ui_gtk4 --nofollow-import-to=pyglossary.ui.ui_qt --nofollow-import-to=gi --nofollow-import-to=gtk --nofollow-import-to=pyqt4 --nofollow-import-to=pyqt5 --nofollow-import-to=pyqt6 --nofollow-import-to=*.tests --noinclude-pytest-mode=nofollow --noinclude-setuptools-mode=nofollow --plugin-disable=pyqt5 main.py --output-dir="${{ env.DIST_DIR }}" --output-filename=pyglossary.exe

      - name: Copy assets
        shell: python
        run: |
            from pathlib import Path
            import shutil
            import sys
            import os
            
            dist_dir = os.getenv("DIST_DIR")
            app_name = os.getenv("APPNAME")
            
            if not dist_dir or not app_name:
                print('missing env vars')
                sys.exit(0)
            
            target_path = Path(dist_dir)/"main.dist"
            print(f'TARGET_PATH={target_path}, APPNAME={app_name}')
            
            sources = ["about", "AUTHORS", "_license-dialog", "config.json", "plugins-meta", "help", "res", "pyglossary"]
            
            if not target_path.exists():
                print(f'missing target dir {target_path.absolute()}')
                sys.exit(0)
            
            for source in sources:
                src = Path(source)
                try:
                    if src.is_dir():
                        copied_to = shutil.copytree(src, target_path / src.name, dirs_exist_ok=True, symlinks=True, ignore_dangling_symlinks=True)
                    else:
                        copied_to = shutil.copy(src, target_path, follow_symlinks=False)
                    print(f"Copied {src} -> {copied_to}")
                except FileNotFoundError:
                    print(f"Missing {src}")
                except PermissionError:
                    print(f"No access {src}")
                except Exception as e:
                    print(f"Failed {src}: {e}")
            print("Done")

      - name: Pack to zip before uploading
        shell: pwsh
        run: |
          # Windows (PowerShell)
          # TODO: integrate with NSIS: https://github.com/marketplace/actions/makensis
          Compress-Archive -Path "${{ env.DIST_DIR }}\main.dist\*" -DestinationPath "${{ runner.os }}-${{ runner.arch }}-${{ env.VERSION }}-dist.zip" -Force

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#github-context
          name: ${{ github.event.repository.name }}-${{ runner.os }}-${{ runner.arch }}-${{ env.VERSION }}
          path: |
            "${{ runner.os }}-${{ runner.arch }}-${{ env.VERSION }}-dist.zip"
            
  release:
    if: true
    needs: [build_macos, build_windows_x64]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          # ref: nuitka-release

      - name: Set release vars
        run: |
          echo "VERSION=$(git describe --abbrev=0)" >> $GITHUB_ENV
          echo "VERSION_WITH_HASH=$(git describe)" >> $GITHUB_ENV

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: true

      - name: Show generated artifacts
        run: |
          pwd
          echo ${{ github.workspace }}/artifacts
          find ${{ github.workspace }}/artifacts   

      - name: make release
        uses: ncipollo/release-action@v1
        # https://github.com/ncipollo/release-action
        with:
          name: ${{ env.VERSION }}
          body: |
            ### ${{ github.event.repository.name }}-${{ env.VERSION_WITH_HASH }}
            ## macOS
            - __IMPORTANT__: macOS Intel-x64 & ARM64 DMG
            
            <blockquote>
            <details>
              <summary> :bulb: How to fix macOS security warning — "APP IS DAMAGED AND CAN'T BE OPENED" :question:</summary>
            
            ![macos file quarantene](https://f002.backblazeb2.com/file/imatgas/macos-remove-quarantine1.png)
            ### ⚠️ If macOS displays a warning that _the app is damaged and cannot be opened_ then move the unpacked bundle to `/Applications`, and run from the terminal.app:
            
            ```bash
            /usr/bin/xattr -d com.apple.quarantine /Applications/PyGlossaryTk.app
            ```
            Now you should be able to open the app by **right-clicking** on **/Applications/PyGlossaryTk.app** in Finder, selecting **Open** and confirming running an app unsigned by Apple (only needs to be done once).
            </details>
            </blockquote>
            
          artifacts: "artifacts/*.zip,artifacts/*.dmg"
          artifactContentType: application/zip
          generateReleaseNotes: true
          makeLatest: true
          allowUpdates: true
          tag: ${{ env.VERSION }}
